const BASE  = window.NERAVA_BASE;
const USER  = window.NERAVA_USER;
let PREFS_CSV = window.NERAVA_PREFS;

const $ = s => document.querySelector(s);
const el = (t, a={}) => { const n=document.createElement(t); Object.assign(n,a); return n; };

async function getJSON(path, params={}){
  const url = new URL(path, BASE);
  Object.entries(params).forEach(([k,v]) => url.searchParams.set(k, v));
  const r = await fetch(url.toString());
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}
async function postJSON(path, body={}, params={}){
  const url = new URL(path, BASE);
  Object.entries(params).forEach(([k,v]) => url.searchParams.set(k, v));
  const r = await fetch(url.toString(), { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}

function setBanner(text){
  $('#banner-text').textContent = text;
  $('#incentive-banner').classList.remove('hidden');
}

/* Map */
let map, userMarker, hubMarker;
function initMap(lat,lng){
  if(map) return;
  map = L.map('map', {zoomControl:false}).setView([lat,lng], 15);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{maxZoom: 20}).addTo(map);
  userMarker = L.circleMarker([lat,lng],{radius:6,color:'#9fc1ff'}).addTo(map);
}
function setHubMarker(lat,lng,status){
  if(hubMarker) map.removeLayer(hubMarker);
  const color = status==='open' ? '#2ecc71' : (status==='busy' ? '#ff6b6b' : '#f1c40f');
  hubMarker = L.circleMarker([lat,lng],{radius:10,color}).addTo(map);
}

/* Merchants */
const SEEDED_LOGOS = [
  { name: 'Starbucks',     logo: 'https://logo.clearbit.com/starbucks.com',     source:'seed' },
  { name: 'North Italia',  logo: 'https://logo.clearbit.com/northitalia.com',   source:'seed' },
  { name: 'Valet',         logo: 'assets/bolt-white.svg',                        source:'seed' },
];
function uniqueByName(items){
  const seen = new Set();
  return items.filter(x=>{ const k=(x.name||'').toLowerCase(); if(seen.has(k)) return false; seen.add(k); return true; });
}
function buildLogoNode(item){
  const img = el('img', {src: item.logo || 'assets/icon-192.png', alt: item.name || 'm'});
  return img;
}
function formatSub(rec){
  const n=rec.free_ports??0; const tier=(rec.tier||'').toUpperCase();
  const miles = (Math.random()*0.8+0.2).toFixed(1);
  const now = new Date(); const min = now.getMinutes(); const next = new Date(now.getTime() + ((60-min)%15)*60000);
  const timeHint = `${String(next.getHours()).padStart(2,'0')}:${String(next.getMinutes()).padStart(2,'0')}`;
  return `${n} free • ${tier||'STANDARD'} • ~${miles} mi • Best at ${timeHint}`;
}

/* Explore loader with robust fallback */
async function loadExplore(){
  let lat=30.4021, lng=-97.7265;
  try{
    await new Promise(res => navigator.geolocation.getCurrentPosition(
      p=>{lat=p.coords.latitude; lng=p.coords.longitude; res();},
      _=>res(), {timeout:1500}
    ));
  }catch(_){}
  initMap(lat,lng);

  // Banner source: incentives/window (optional) → fallback to award probe
  let bannerSet = false;
  try{
    const w = await getJSON('/v1/incentives/window');
    if (w && typeof w.active === 'boolean'){
      if (w.active) { setBanner('Cheaper charging now'); bannerSet = true; }
      else {
        const etaMs = new Date(w.start_iso) - new Date();
        if (etaMs > 0) {
          const mins = Math.round(etaMs/60000); const h = Math.floor(mins/60), m = mins%60;
          setBanner(`Cheaper charging in ${h?`${h}h `:''}${m}m`); bannerSet = true;
        }
      }
    }
  }catch(_){}
  if(!bannerSet){
    try{
      const probe = await postJSON('/v1/incentives/award_off_peak', {}, {user_id: USER});
      if (probe && (probe.awarded_cents||0)>0) setBanner('Cheaper charging now');
    }catch(_){}
  }

  // Recommendation → Nearby → friendly empty
  let rec = null;
  try{
    rec = await getJSON('/v1/hubs/recommend', {lat,lng,radius_km:2,user_id:USER});
  }catch(_){}
  if(!rec || !rec.lat || !rec.lng){
    try{
      const hubs = await getJSON('/v1/hubs/nearby', {lat,lng,radius_km:2,max_results:5});
      if (Array.isArray(hubs) && hubs.length){ rec = hubs[0]; }
    }catch(_){}
  }

  const strip = $('#merchant-strip'); strip.innerHTML='';
  $('#rec-empty').classList.add('hidden');

  if(rec && rec.lat && rec.lng){
    setHubMarker(rec.lat, rec.lng, rec.status||'open');
    $('#rec-name').textContent   = rec.name || 'Nerava Hub';
    $('#rec-status').textContent = rec.status || 'open';
    $('#rec-sub').textContent    = formatSub(rec);

    try{
      const m = await getJSON('/v1/merchants/nearby', {
        lat: rec.lat, lng: rec.lng, radius_m: 600, max_results: 20,
        prefs: PREFS_CSV, hub_id: rec.id||'hub_unknown'
      });
      uniqueByName([...(SEEDED_LOGOS||[]), ...(m||[])]).slice(0,12)
        .forEach(x => strip.appendChild(buildLogoNode(x)));
    }catch(_){ SEEDED_LOGOS.forEach(x=> strip.appendChild(buildLogoNode(x))); }

    $('#btn-reserve').onclick = async ()=>{
      try{
        const body = { hub_id: rec.id || 'hub', user_id: USER, start_iso: new Date(Date.now()+10*60*1000).toISOString(), minutes: 30 };
        const out = await postJSON('/v1/reservations/soft', body);
        alert('Held: ' + (out.human || `${out.window_start_iso}–${out.window_end_iso}`));
      }catch(e){ alert('Reserve failed'); }
    };
    $('#btn-directions').onclick = ()=> location.href = `https://www.google.com/maps/dir/?api=1&destination=${rec.lat},${rec.lng}`;
  } else {
    // Friendly empty
    $('#rec-name').textContent   = 'Recommended hub';
    $('#rec-status').textContent = '—';
    $('#rec-sub').textContent    = '—';
    $('#rec-empty').classList.remove('hidden');
  }

  // Trip planner (placeholder → Google Maps)
  $('#trip-btn').onclick = ()=>{
    const q = ($('#trip-input').value||'').trim();
    if(!q){ $('#trip-status').textContent = 'Enter a destination to plan.'; return; }
    $('#trip-status').textContent = 'Finding optimal hub along your route…';
    setTimeout(()=>{ $('#trip-status').textContent = 'Suggested route ready. Opening maps…'; }, 400);
    setTimeout(()=>{ window.location.href = `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(q)}`; }, 900);
  };
}

/* Wallet */
async function loadWallet(){
  const bal = await getJSON('/v1/wallet', {user_id: USER});
  $('#wallet-balance').textContent = `${(bal.balance_cents||0)/100} USD`;
  try{
    const hist = await getJSON('/v1/wallet/history', {user_id: USER});
    const list = $('#wallet-history'); list.innerHTML='';
    (hist||[]).slice(0,50).forEach(row=>{
      const cents = row.amount_cents ?? row.cents ?? 0;
      const sign = cents >= 0 ? '+' : '−';
      const abs = Math.abs(cents);
      const item = el('div', {className:'list-item', textContent:
        `${row.reason || 'Transaction'} • ${sign}$${(abs/100).toFixed(2)} • ${row.at || row.timestamp || ''}`});
      list.appendChild(item);
    });
  }catch(_){
    $('#wallet-history').innerHTML = '<div class="muted">History not available</div>';
  }
}

/* Profile */
function prefsCSVFromForm(){
  const ids = ['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise'];
  const map = {}; ids.forEach(id=> map[id] = $('#'+id).checked);
  const pos = []; if(map.pref_coffee) pos.push('coffee_bakery'); if(map.pref_food) pos.push('quick_bite');
  return { json: map, csv: pos.join(',') };
}
async function loadProfile(){
  $('#profile-email').textContent = USER;
  try{
    const current = await getJSON(`/v1/users/${encodeURIComponent(USER)}/prefs`);
    ['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise']
      .forEach(k => { if (k in current) $('#'+k).checked = !!current[k]; });
  }catch(_){}
  $('#btn-save-prefs').onclick = async ()=>{
    const { json, csv } = prefsCSVFromForm();
    await postJSON(`/v1/users/${encodeURIComponent(USER)}/prefs`, json);
    PREFS_CSV = csv || PREFS_CSV;
    window.NERAVA_PREFS = PREFS_CSV;
    localStorage.setItem('NERAVA_PREFS', PREFS_CSV);
    alert('Preferences saved');
  };
  $('#btn-recommend-refresh').onclick = async ()=>{
    await loadExplore(); // refresh explore with new prefs
    $('#prefs-impact').textContent = 'Recommendation refreshed based on preferences.';
  };
}

/* Charge */
async function loadCharge(){
  $('#session-info').innerHTML = '<div class="muted">No active session. Scan a station QR to begin.</div>';
  $('#btn-session').onclick = ()=> alert('Session details demo coming soon');
  $('#btn-scan').onclick    = ()=> alert('QR scanner demo coming soon');
}

/* Router */
function showView(key){
  const ids = ['explore','charge','wallet','profile'];
  ids.forEach(id=>{
    const elv = $('#view-'+id);
    if (id===key) elv.classList.remove('hidden'); else elv.classList.add('hidden');
  });
  // Only show explore cards on explore
  $('#recommend-card').style.display = key==='explore' ? '' : 'none';
  $('#trip-card').style.display      = key==='explore' ? '' : 'none';
  document.querySelectorAll('.navbtn').forEach(b => b.classList.toggle('active', b.dataset.view===key));
  if (key==='explore') loadExplore();
  if (key==='wallet')  loadWallet();
  if (key==='profile') loadProfile();
  if (key==='charge')  loadCharge();
}

/* Boot */
document.addEventListener('DOMContentLoaded', async ()=>{
  try{ const h = await getJSON('/v1/health'); if(!h.ok) throw 0; }catch(e){ alert('Backend unavailable at '+BASE); }
  showView('explore');
  document.querySelectorAll('.navbtn').forEach(btn => btn.addEventListener('click', ()=> showView(btn.dataset.view)));
});
