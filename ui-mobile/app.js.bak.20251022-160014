const BASE = localStorage.getItem("NERAVA_URL") || "http://127.0.0.1:8000";
const USER = localStorage.getItem("NERAVA_USER") || "demo@nerava.app";

// Basic helpers
const $ = (sel) => document.querySelector(sel);
const $all = (sel) => Array.from(document.querySelectorAll(sel));
const show = (el) => el.classList.remove("hidden");
const hide = (el) => el.classList.add("hidden");

// Router: only one screen visible
function setActive(tab) {
  // screens
  $all(".screen").forEach(s => s.classList.remove("active"));
  $(`#screen-${tab}`).classList.add("active");
  // nav state
  $all(".tab").forEach(t => t.classList.remove("active"));
  $(`.tab[data-tab="${tab}"]`).classList.add("active");
  // banner only on Explore
  if (tab === "explore") show($("#incentive-banner"));
  else hide($("#incentive-banner"));
}

function initTabs() {
  $all(".tab").forEach(btn=>{
    btn.addEventListener("click", ()=> setActive(btn.dataset.tab));
  });
}

// Map
let map, markerLayer;
function initMap() {
  // lazy Leaflet if already on page
  if (!window.L) { console.warn("Leaflet expected via index.html <script> or CDN."); return; }
  map = L.map('map',{ zoomControl:false }).setView([30.4021,-97.7265], 14);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{ maxZoom:19 }).addTo(map);
  markerLayer = L.layerGroup().addTo(map);
}

// Demo: banner window
async function refreshBanner() {
  try {
    // If your backend /v1/incentives/window exists, call it; else show default
    const r = await fetch(`${BASE}/v1/incentives/window`);
    if (!r.ok) throw new Error("no incentives");
    const j = await r.json();
    $("#banner-text").textContent = j.message || "Cheaper charging now";
  } catch {
    $("#banner-text").textContent = "Cheaper charging now";
  }
  show($("#incentive-banner"));
}

// Hub recommendation (demo)
async function loadRecommendation() {
  // You can wire to /v1/hubs/recommend — here we just pin to map center
  markerLayer.clearLayers();
  const lat = 30.4025, lng = -97.7258;
  const m = L.circleMarker([lat,lng],{ radius:10, color:"#22ffaa" });
  m.addTo(markerLayer);
  if (map) map.setView([lat,lng], 15);
  // Text bits already seeded in HTML; you can update here if needed
}

// Wallet summary (no empty rows)
async function refreshWallet() {
  try {
    const r = await fetch(`${BASE}/v1/wallet?user_id=${encodeURIComponent(USER)}`);
    const j = await r.json();
    const bal = (j.balance_cents ?? 0)/100;
    $("#wallet-balance").textContent = `+$${bal.toFixed(2)}`;
  } catch { $("#wallet-balance").textContent = "+$0.00"; }

  // summarize “ways you earned” (demo categories)
  const ways = [
    ["Off-peak award", "+$0.50"],
    ["Perk reward", "+$0.75"],
    ["Utility bonus", "+$1.00"],
  ];
  const ul = $("#wallet-ways"); ul.innerHTML = "";
  ways.forEach(([k,v])=>{
    const li = document.createElement("li");
    const left = document.createElement("span"); left.textContent = k;
    const right = document.createElement("strong"); right.textContent = v;
    li.append(left,right); ul.append(li);
  });
}

// Trip panel toggle
function initTripToggle() {
  $("#trip-fab").addEventListener("click", ()=>{
    hide($("#hub-card")); show($("#trip-panel"));
  });
  $("#trip-close").addEventListener("click", ()=>{
    show($("#hub-card")); hide($("#trip-panel"));
  });
}

function boot() {
  initTabs();
  initTripToggle();
  initMap();
  setActive("explore");
  refreshBanner();
  loadRecommendation();
  refreshWallet();
}
document.addEventListener("DOMContentLoaded", boot);
