const BASE = (window.NERAVA_URL || "http://127.0.0.1:8000");

const state = {
  tab: "explore",
  guardToken: 0,
  hubRec: null,
  prefs: null,
};

const el = s => document.querySelector(s);
const view = () => el("#view");

(function dedupeHMR(){
  // Remove duplicate headers/banners on hot reloads
  const hdrs = document.querySelectorAll('#brand'); if (hdrs.length>1) hdrs.forEach((h,i)=>{ if(i) h.remove();});
  const bans = document.querySelectorAll('#incentiveBanner'); if (bans.length>1) bans.forEach((b,i)=>{ if(i) b.remove();});
})();

/* --- fetch helpers --- */
async function jget(path, params={}){
  const url = new URL(BASE + path);
  Object.entries(params).forEach(([k,v])=> url.searchParams.set(k,v));
  const r = await fetch(url, {cache:"no-store"});
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}
async function jpost(path, body){
  const r = await fetch(BASE+path, {method:"POST", headers:{"Content-Type":"application/json"}, body:JSON.stringify(body||{})});
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}

/* --- banner (Explore only) --- */
async function loadBanner(){
  try{
    const w = await jget("/v1/incentives/window").catch(()=>({status:"now"}));
    el("#bannerText").textContent = (w.status==="soon") ? `Cheaper charging in ${w.in_minutes||60} min` : "Cheaper charging now";
  }catch(e){ /* keep default */ }
}
function showBanner(on){ el("#incentiveBanner").classList.toggle("hidden", !on); }

/* --- EXPLORE --- */
function renderExploreShell(){
  // Recommendation + hidden trip panel
  view().innerHTML = `
    <div class="stack">
      <div class="card panel" id="recCard">
        <div class="row">
          <h2 style="margin:0">Recommended hub</h2>
          <div class="row" style="gap:8px">
            <div class="badge" id="hubBusy">busy</div>
            <div class="badge" id="hubTier">premium</div>
          </div>
        </div>
        <div id="hubBody" class="stack"></div>
        <div class="row" style="gap:12px">
          <button class="btn" id="btnReserve">Reserve</button>
          <button class="btn secondary" id="btnDirections">Directions</button>
        </div>
      </div>

      <div class="card panel" id="tripPanel" style="display:none">
        <div class="row">
          <h3 style="margin:0">Plan a Trip</h3>
          <button class="btn secondary" id="btnTripBack">Back</button>
        </div>
        <p class="muted">Enter a destination, we’ll suggest a hub along the way.</p>
        <div class="field">
          <input id="tripInput" type="text" placeholder="e.g., 4100 Five St, Austin" />
          <button class="btn secondary" id="btnPlan">Plan</button>
        </div>
      </div>
    </div>
  `;
  // Show FAB on Explore
  el("#planFab").classList.remove("hidden");
  el("#planFab").onclick = () => toggleTrip(true);
}
function toggleTrip(show){
  const rec = el("#recCard"), trip = el("#tripPanel");
  if (show){ rec.style.display="none"; trip.style.display="block"; }
  else     { rec.style.display="block"; trip.style.display="none"; }
  const back = el("#btnTripBack");
  if (back) back.onclick = ()=> toggleTrip(false);
}

async function loadExploreData(guard){
  const lat = parseFloat(localStorage.getItem("lat") || "30.4021");
  const lng = parseFloat(localStorage.getItem("lng") || "-97.7265");
  const user = getUser();

  const rec = await jget("/v1/hubs/recommend",{lat,lng,radius_km:2,user_id:user});
  const merch = await jget("/v1/merchants/nearby",{lat:rec.lat||lat,lng:rec.lng||lng,radius_m:600,max_results:8,prefs:getPrefsCSV(),hub_id:rec.id||"hub_unknown"});

  if (guard !== state.guardToken || state.tab!=="explore") return;
  state.hubRec = rec;

  const logos = merch.slice(0,3).map(m => {
    const src = m.logo || m.logo_url || "";
    return `<img alt="${m.name}" src="${src || 'data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2228%22 height=%2228%22><rect width=%2228%22 height=%2228%22 rx=%2214%22 fill=%22%230b1220%22/></svg>'}">`;
  }).join("");

  el("#hubBody").innerHTML = `
    <div class="row">
      <div class="logo-rail">${logos}</div>
    </div>
    <div class="muted">${(rec.free_ports||0)} free • ${(rec.name||'Nerava Hub')}</div>
  `;
  el("#hubBusy").textContent = (rec.status||"open");
  el("#hubTier").textContent = (rec.tier||"premium");

  el("#btnReserve").onclick = ()=> reserve(rec);
  el("#btnDirections").onclick = ()=> window.open(`https://www.google.com/maps?q=${rec.lat},${rec.lng}`,'_blank');
}
async function reserve(rec){
  try{
    const start = new Date(Date.now()+10*60000).toISOString();
    await jpost("/v1/reservations/soft", {hub_id:rec.id,user_id:getUser(),start_iso:start,minutes:30});
    alert("Reservation placed for 30 minutes.");
  }catch(e){ alert("Reserve failed: "+String(e)); }
}

/* --- CHARGE --- */
function renderCharge(){
  el("#planFab").classList.add("hidden"); // no FAB here
  view().innerHTML = `
    <div class="card panel">
      <h2 style="margin-top:0">Charge</h2>
      <p>Scan a QR on site or view your active session.</p>
      <div class="grid">
        <button class="btn">Scan QR</button>
        <button class="btn secondary" onclick="location.reload()">Refresh Session</button>
      </div>
    </div>
  `;
}

/* --- WALLET --- */
function cents(n){ return (n/100).toFixed(2); }
function sum(arr){ return arr.reduce((a,b)=>a+b,0); }

async function renderWallet(){
  el("#planFab").classList.add("hidden"); // no FAB here
  const user = getUser();
  const balResp = await jget("/v1/wallet",{user_id:user}).catch(()=>({balance_cents:0}));
  const hist = await jget("/v1/wallet/history",{user_id:user}).catch(()=>[]);
  // Filter zero-amount entries
  const rows = (hist||[]).filter(tx => (tx.amount_cents||0) !== 0);

  // Group by type (earnings only >0)
  const earnings = rows.filter(r => (r.amount_cents||0) > 0);
  const byType = {};
  earnings.forEach(r => { byType[r.type||'OTHER'] = (byType[r.type||'OTHER']||0) + (r.amount_cents||0); });

  view().innerHTML = `
    <div class="stack">
      <div class="card panel">
        <div class="row"><h2 style="margin:0">Wallet</h2><div class="badge">$${cents(balResp.balance_cents||0)}</div></div>
        <div class="muted">Total balance</div>
      </div>

      <div class="card panel">
        <h3 style="margin-top:0">Ways you earned</h3>
        <div class="stack">
          ${Object.keys(byType).length ? Object.entries(byType).map(([k,v]) => `
            <div class="row" style="padding:6px 0;border-bottom:1px solid #1e293b">
              <div>${k}</div><div>+$${cents(v)}</div>
            </div>`).join('') : `<div class="muted">No earnings yet.</div>`}
        </div>
      </div>

      <div class="card panel">
        <h3 style="margin-top:0">History</h3>
        <div class="scroll">
          ${rows.length ? rows.map(tx => `
            <div class="row" style="padding:10px 0;border-bottom:1px solid #1e293b">
              <div>${tx.type||'ADJUST'}</div>
              <div>${tx.amount_cents>0?'+':'−'}$${cents(Math.abs(tx.amount_cents||0))}</div>
            </div>`).join('') : `<div class="muted">No transactions.</div>`}
        </div>
      </div>
    </div>
  `;
}

/* --- PROFILE --- */
async function renderProfile(){
  el("#planFab").classList.add("hidden"); // no FAB here
  const prefs = await jget(`/v1/users/${getUser()}/prefs`).catch(()=>({
    pref_coffee:false,pref_food:false,pref_dog:false,pref_kid:false,pref_shopping:false,pref_exercise:false
  }));
  state.prefs=prefs;
  view().innerHTML = `
    <div class="card panel">
      <h2 style="margin-top:0">Profile</h2>
      <div class="muted">Signed in as ${getUser()}</div>
      <div class="scroll">
        <div class="grid" style="margin-top:10px">
          ${prefRow('Coffee & Bakery','pref_coffee')}
          ${prefRow('Quick Bites','pref_food')}
          ${prefRow('Dog Friendly','pref_dog')}
          ${prefRow('Kid Friendly','pref_kid')}
          ${prefRow('Shopping','pref_shopping')}
          ${prefRow('Exercise','pref_exercise')}
        </div>
      </div>
      <div class="row" style="margin-top:12px">
        <button class="btn" id="savePrefs">Save Preferences</button>
      </div>
    </div>
  `;
  document.querySelectorAll("input[type=checkbox][data-key]").forEach(cb=>{
    cb.checked = !!prefs[cb.dataset.key];
  });
  el("#savePrefs").onclick = async ()=>{
    const body = takePrefs();
    await jpost(`/v1/users/${getUser()}/prefs`, body);
    alert("Preferences saved.");
  };
}
function prefRow(label,key){ return `<label class="chk"><input type="checkbox" data-key="${key}"/><span>${label}</span></label>`; }
function takePrefs(){
  const keys=['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise'];
  const out={}; keys.forEach(k=> out[k]= !!document.querySelector(`input[data-key="${k}"]`).checked ); return out;
}

/* --- Tab router --- */
function switchTab(tab){
  state.tab = tab;
  state.guardToken++;
  document.querySelectorAll('.tab').forEach(b=> b.classList.toggle('active', b.dataset.tab===tab));
  showBanner(tab==='explore');

  if (tab==='explore'){
    renderExploreShell();
    loadBanner();
    const myGuard = state.guardToken;
    loadExploreData(myGuard);
  }else if (tab==='charge'){
    renderCharge();
  }else if (tab==='wallet'){
    renderWallet();
  }else{
    renderProfile();
  }
}

/* helpers */
function getUser(){ return (localStorage.getItem('user_id') || 'demo@nerava.app'); }
function getPrefsCSV(){
  const p = state.prefs || {}; const order=['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise'];
  const map={pref_coffee:'coffee_bakery',pref_food:'quick_bite',pref_dog:'dog',pref_kid:'kid',pref_shopping:'shopping_retail',pref_exercise:'exercise'};
  return order.filter(k=>p[k]).map(k=>map[k]).join(',');
}

/* init */
function init(){
  document.querySelectorAll('.tab').forEach(b=> b.addEventListener('click', ()=> switchTab(b.dataset.tab)));
  el("#planFab").addEventListener('click', ()=> toggleTrip(true)); // ensure bound
  switchTab('explore');
}
init();
