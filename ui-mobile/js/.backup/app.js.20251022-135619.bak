const BASE  = window.NERAVA_BASE;
const USER  = window.NERAVA_USER;
let PREFS_CSV = window.NERAVA_PREFS;
let map, userMarker, hubMarker, lastRecBeforePrefs = null;

function $(s){ return document.querySelector(s); }
function el(t, a={}){ const n=document.createElement(t); Object.assign(n,a); return n; }

async function getJSON(path, params={}){
  const url = new URL(path, BASE);
  Object.entries(params).forEach(([k,v]) => url.searchParams.set(k, v));
  const r = await fetch(url.toString());
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}
async function postJSON(path, body={}, params={}){
  const url = new URL(path, BASE);
  Object.entries(params).forEach(([k,v]) => url.searchParams.set(k, v));
  const r = await fetch(url.toString(), { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}

/* ---------- Banner helpers ---------- */
function setBanner(text, warn=false){
  const banner = $('#incentive-banner');
  const logoUrl = 'assets/nerava-mark.svg';
  banner.innerHTML = `<div class="banner-inner"><img class="brandmark" src="${logoUrl}" alt="Nerava"/><span>${text}</span></div>`;
  banner.classList.toggle('warn', !!warn);
  banner.classList.remove('hidden');
}

/* ---------- Map & Home ---------- */
function initMap(lat,lng){
  if(map) return;
  map = L.map('map', {zoomControl:false}).setView([lat,lng], 15);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{maxZoom: 20}).addTo(map);
  userMarker = L.circleMarker([lat,lng],{radius:6,color:'#9fc1ff'}).addTo(map);
}
function setHubMarker(lat,lng,status){
  if(hubMarker) map.removeLayer(hubMarker);
  const color = status==='open' ? '#2ecc71' : (status==='busy' ? '#ff6b6b' : '#f1c40f');
  hubMarker = L.circleMarker([lat,lng],{radius:10,color}).addTo(map);
}
function formatSub(h){ const n=h.free_ports??0; const tier=(h.tier||'').toUpperCase(); return `${n} free • ${tier}`; }

/* Seeded hero brands so the strip always looks great */
const SEEDED_LOGOS = [
  { name: 'Starbucks',     logo: 'https://logo.clearbit.com/starbucks.com',     categories: ['coffee_bakery'] },
  { name: 'North Italia',  logo: 'https://logo.clearbit.com/northitalia.com',   categories: ['dining_sitdown','quick_bite'] },
  { name: 'Valet Charging',logo: 'assets/icon-valet.svg',                        categories: ['other'] }
];
function uniqueByName(items){
  const seen = new Set();
  return items.filter(x=>{
    const k = (x.name||'').toLowerCase();
    if (seen.has(k)) return false;
    seen.add(k); return true;
  });
}
function buildLogoNode(item){
  const wrap = el('div', {className:'logo-wrap'});
  const img  = el('img', {src: item.logo || 'assets/icon-192.png', alt: item.name || 'm'});
  wrap.appendChild(img);
  if (item.source === 'local' && item.perk) {
    wrap.appendChild(el('div', {className:'perk-badge', textContent:'Perk'}));
  }
  return wrap;
}

async function loadHome(){
  let lat=30.4021, lng=-97.7265;
  try{
    await new Promise(res => navigator.geolocation.getCurrentPosition(
      p=>{lat=p.coords.latitude; lng=p.coords.longitude; res();},
      _=>res(), {timeout:1500}
    ));
  }catch(_){}
  initMap(lat,lng);

  // Recommendation (baseline for delta after prefs)
  const rec = await getJSON('/v1/hubs/recommend', {lat,lng,radius_km:2,user_id:USER});
  lastRecBeforePrefs = rec;
  if(rec && rec.lat && rec.lng){
    setHubMarker(rec.lat, rec.lng, rec.status||'open');
    $('#rec-name').textContent = rec.name || 'Recommended hub';
    $('#rec-status').textContent = rec.status || 'open';
    $('#rec-sub').textContent = formatSub(rec);
    $('#recommend-card').classList.remove('hidden');

    // Unified merchants (local perks + google) with seeds up front
    const m = await getJSON('/v1/merchants/nearby', {
      lat: rec.lat, lng: rec.lng, radius_m: 600, max_results: 20,
      prefs: PREFS_CSV, hub_id: rec.id||'hub_unknown'
    });
    const combined = uniqueByName([...(SEEDED_LOGOS||[]), ...(m||[])]);
    const strip = $('#merchant-strip'); strip.innerHTML='';
    combined.slice(0,12).forEach(x => strip.appendChild(buildLogoNode(x)));

    $('#btn-reserve').onclick = async ()=>{
      try{
        const body = {
          hub_id: rec.id || 'hub',
          user_id: USER,
          start_iso: new Date(Date.now()+10*60*1000).toISOString(),
          minutes: 30
        };
        const out = await postJSON('/v1/reservations/soft', body);
        alert('Held: ' + (out.human || `${out.window_start_iso}–${out.window_end_iso}`));
      }catch(e){ alert('Reserve failed'); }
    };
    $('#btn-directions').onclick = ()=>{
      location.href = `https://www.google.com/maps/dir/?api=1&destination=${rec.lat},${rec.lng}`;
    };
  }

  // Incentive banner: try window endpoint first, else award probe
  try{
    let usedWindow = false;
    try{
      const w = await getJSON('/v1/incentives/window'); // optional endpoint
      if (w && typeof w.active === 'boolean') {
        if (w.active) setBanner('Cheaper charging now');
        else {
          const etaMs = new Date(w.start_iso) - new Date();
          if (etaMs > 0) {
            const mins = Math.round(etaMs/60000);
            const h = Math.floor(mins/60), m = mins%60;
            setBanner(`Cheaper charging in ${h?`${h}h `:''}${m}m`, true);
          } else {
            $('#incentive-banner').classList.add('hidden');
          }
        }
        usedWindow = true;
      }
    }catch(_){}
    if (!usedWindow) {
      const probe = await postJSON('/v1/incentives/award_off_peak', {}, {user_id: USER});
      if (probe && (probe.awarded_cents || 0) > 0) setBanner('Cheaper charging now');
      else $('#incentive-banner').classList.add('hidden');
    }
  }catch(_){}
}

/* ---------- Wallet ---------- */
async function loadWallet(){
  const bal = await getJSON('/v1/wallet', {user_id: USER});
  $('#wallet-balance').textContent = `${(bal.balance_cents||0)/100} USD`;
  try{
    const hist = await getJSON('/v1/wallet/history', {user_id: USER});
    const list = $('#wallet-history'); list.innerHTML='';
    (hist||[]).slice(0,20).forEach(row=>{
      const item = el('div', {className:'list-item'});
      const cents = row.amount_cents ?? row.cents ?? 0;
      const sign = cents >= 0 ? '+' : '−';
      const abs = Math.abs(cents);
      item.textContent = `${row.reason || 'Transaction'} • ${sign}$${(abs/100).toFixed(2)} • ${row.at || row.timestamp || ''}`;
      list.appendChild(item);
    });
  }catch(_){
    $('#wallet-history').innerHTML = '<div class="muted">History not available</div>';
  }
}

/* ---------- Profile (prefs) ---------- */
function prefsCSVFromForm(){
  const ids = ['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise'];
  const map = {}; ids.forEach(id=> map[id] = $('#'+id).checked);
  const pos = [];
  if(map.pref_coffee) pos.push('coffee_bakery');
  if(map.pref_food) pos.push('quick_bite');
  return { json: map, csv: pos.join(',') };
}
async function loadProfile(){
  $('#profile-email').textContent = USER;
  try{
    const current = await getJSON(`/v1/users/${encodeURIComponent(USER)}/prefs`);
    ['pref_coffee','pref_food','pref_dog','pref_kid','pref_shopping','pref_exercise']
      .forEach(k => { if (k in current) $('#'+k).checked = !!current[k]; });
  }catch(_){}

  $('#btn-save-prefs').onclick = async ()=>{
    const { json, csv } = prefsCSVFromForm();
    await postJSON(`/v1/users/${encodeURIComponent(USER)}/prefs`, json);
    PREFS_CSV = csv || PREFS_CSV;
    window.NERAVA_PREFS = PREFS_CSV;
    localStorage.setItem('NERAVA_PREFS', PREFS_CSV);
    alert('Preferences saved');
  };

  $('#btn-recommend-refresh').onclick = async ()=>{
    try{
      const after = await getJSON('/v1/hubs/recommend', {lat:30.4021,lng:-97.7265,radius_km:2,user_id:USER});
      const before = lastRecBeforePrefs || {};
      const added = (after.reason_tags||[]).filter(x => !(before.reason_tags||[]).includes(x));
      const scoreBefore = before.score ?? 0, scoreAfter = after.score ?? 0;
      $('#prefs-impact').innerHTML = `
        <div>Score: ${scoreBefore.toFixed(1)} → ${scoreAfter.toFixed(1)} (${(scoreAfter-scoreBefore).toFixed(1)})</div>
        <div>Reasons added: ${added.join(', ') || '—'}</div>`;
      await loadHome();
    }catch(e){ $('#prefs-impact').textContent = 'Could not refresh recommendation.'; }
  };
}

/* ---------- Plan Charge (placeholder) ---------- */
async function loadPlanCharge(){
  $('#session-info').innerHTML = '<div class="muted">No active session. Scan a station QR to begin.</div>';
  $('#btn-session').onclick = ()=> alert('Session details demo coming soon');
  $('#btn-scan').onclick    = ()=> alert('QR scanner demo coming soon');
}

/* ---------- Simple router ---------- */
function showView(key){
  const views = {
    home:           ()=>{ $('#recommend-card').classList.remove('hidden'); $('#view-plan-charge').classList.add('hidden'); $('#view-plan-trip').classList.add('hidden'); $('#view-wallet').classList.add('hidden'); $('#view-profile').classList.add('hidden'); },
    'plan-charge':  ()=>{ $('#recommend-card').classList.add('hidden');   $('#view-plan-charge').classList.remove('hidden'); $('#view-plan-trip').classList.add('hidden'); $('#view-wallet').classList.add('hidden'); $('#view-profile').classList.add('hidden'); loadPlanCharge(); },
    'plan-trip':    ()=>{ $('#recommend-card').classList.add('hidden');   $('#view-plan-charge').classList.add('hidden'); $('#view-plan-trip').classList.remove('hidden'); $('#view-wallet').classList.add('hidden'); $('#view-profile').classList.add('hidden'); },
    wallet:         ()=>{ $('#recommend-card').classList.add('hidden');   $('#view-plan-charge').classList.add('hidden'); $('#view-plan-trip').classList.add('hidden'); $('#view-wallet').classList.remove('hidden'); $('#view-profile').classList.add('hidden'); loadWallet(); },
    profile:        ()=>{ $('#recommend-card').classList.add('hidden');   $('#view-plan-charge').classList.add('hidden'); $('#view-plan-trip').classList.add('hidden'); $('#view-wallet').classList.add('hidden'); $('#view-profile').classList.remove('hidden'); loadProfile(); },
  };
  (views[key]||views.home)();
  document.querySelectorAll('.navbtn').forEach(b => b.classList.toggle('active', b.dataset.view===key));
}

/* ---------- Boot ---------- */
document.addEventListener('DOMContentLoaded', async ()=>{
  try{
    const h = await getJSON('/v1/health');
    if(!h.ok) throw new Error('backend not ok');
  }catch(e){
    alert('Backend unavailable at '+BASE);
  }
  await loadHome();
  document.querySelectorAll('.navbtn').forEach(btn => btn.addEventListener('click', ()=> showView(btn.dataset.view)));
});
