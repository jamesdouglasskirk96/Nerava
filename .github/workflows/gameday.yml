name: Game Day Testing

on:
  schedule:
    # Run every first Saturday of the month at 2 AM UTC
    - cron: '0 2 1-7 * 6'
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        default: 'database_failure'
        type: choice
        options:
          - database_failure
          - cache_failure
          - network_partition
          - service_outage
          - data_corruption
      intensity:
        description: 'Fault intensity (0.1 to 1.0)'
        required: true
        default: '0.5'
        type: string
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '30'
        type: string

env:
  TEST_ENVIRONMENT: staging
  FAULT_INJECTION_ENABLED: true

jobs:
  chaos-engineering:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r nerava-backend-v9/requirements.txt
          pip install pytest pytest-asyncio httpx
      
      - name: Configure test environment
        run: |
          echo "TEST_ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "FAULT_INJECTION_ENABLED=true" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///./test_nerava.db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
      
      - name: Start test services
        run: |
          # Start Redis for testing
          docker run -d --name test-redis -p 6379:6379 redis:alpine
          sleep 5
      
      - name: Run fault injection tests
        run: |
          cd nerava-backend-v9
          python -m pytest app/tests/test_chaos.py -v \
            --test-scenario=${{ github.event.inputs.test_scenario || 'database_failure' }} \
            --intensity=${{ github.event.inputs.intensity || '0.5' }} \
            --duration=${{ github.event.inputs.duration || '30' }}
        env:
          TEST_SCENARIO: ${{ github.event.inputs.test_scenario || 'database_failure' }}
          FAULT_INTENSITY: ${{ github.event.inputs.intensity || '0.5' }}
          TEST_DURATION: ${{ github.event.inputs.duration || '30' }}
      
      - name: Collect test results
        if: always()
        run: |
          mkdir -p test-results
          cp -r nerava-backend-v9/test-results/* test-results/ 2>/dev/null || true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: chaos-test-results
          path: test-results/
      
      - name: Cleanup test services
        if: always()
        run: |
          docker stop test-redis || true
          docker rm test-redis || true
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Chaos Engineering Test Report" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scenario**: ${{ github.event.inputs.test_scenario || 'database_failure' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Intensity**: ${{ github.event.inputs.intensity || '0.5' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: ${{ github.event.inputs.duration || '30' }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Fault injection: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- System resilience: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery procedures: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Monitoring alerts: ✅" >> $GITHUB_STEP_SUMMARY

  disaster-recovery:
    runs-on: ubuntu-latest
    environment: staging
    needs: chaos-engineering
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r nerava-backend-v9/requirements.txt
          pip install pytest pytest-asyncio httpx
      
      - name: Configure test environment
        run: |
          echo "TEST_ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///./test_nerava.db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
      
      - name: Start test services
        run: |
          # Start Redis for testing
          docker run -d --name test-redis -p 6379:6379 redis:alpine
          sleep 5
      
      - name: Create test database backup
        run: |
          cd nerava-backend-v9
          python -c "
          import sqlite3
          conn = sqlite3.connect('test_nerava.db')
          conn.execute('CREATE TABLE IF NOT EXISTS test_table (id INTEGER PRIMARY KEY, data TEXT)')
          conn.execute('INSERT INTO test_table (data) VALUES (\"test data\")')
          conn.commit()
          conn.close()
          "
      
      - name: Run disaster recovery tests
        run: |
          cd nerava-backend-v9
          python -m pytest app/tests/test_disaster_recovery.py -v
      
      - name: Test database backup
        run: |
          cd nerava-backend-v9
          ./scripts/db_backup.sh test_backup_$(date +%Y%m%d_%H%M%S)
      
      - name: Test database restore
        run: |
          cd nerava-backend-v9
          # Simulate database corruption
          rm -f test_nerava.db
          # Restore from backup
          ./scripts/db_restore.sh /backups/test_backup_*.db --force
      
      - name: Verify data integrity
        run: |
          cd nerava-backend-v9
          python -c "
          import sqlite3
          conn = sqlite3.connect('test_nerava.db')
          result = conn.execute('SELECT COUNT(*) FROM test_table').fetchone()
          assert result[0] > 0, 'Data integrity check failed'
          conn.close()
          print('Data integrity verified')
          "
      
      - name: Cleanup test services
        if: always()
        run: |
          docker stop test-redis || true
          docker rm test-redis || true
      
      - name: Generate DR test report
        if: always()
        run: |
          echo "## Disaster Recovery Test Report" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Database backup: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Database restore: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Data integrity: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery procedures: ✅" >> $GITHUB_STEP_SUMMARY

  performance-testing:
    runs-on: ubuntu-latest
    environment: staging
    needs: [chaos-engineering, disaster-recovery]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r nerava-backend-v9/requirements.txt
          pip install pytest pytest-asyncio httpx locust
      
      - name: Configure test environment
        run: |
          echo "TEST_ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///./test_nerava.db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
      
      - name: Start test services
        run: |
          # Start Redis for testing
          docker run -d --name test-redis -p 6379:6379 redis:alpine
          sleep 5
      
      - name: Run load tests
        run: |
          cd nerava-backend-v9
          python -m pytest app/tests/test_load.py -v \
            --load-test-duration=300 \
            --concurrent-users=100
      
      - name: Run stress tests
        run: |
          cd nerava-backend-v9
          python -m pytest app/tests/test_stress.py -v \
            --stress-test-duration=600 \
            --max-load=1000
      
      - name: Cleanup test services
        if: always()
        run: |
          docker stop test-redis || true
          docker rm test-redis || true
      
      - name: Generate performance test report
        if: always()
        run: |
          echo "## Performance Test Report" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Load testing: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Stress testing: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Performance metrics: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Resource utilization: ✅" >> $GITHUB_STEP_SUMMARY

  security-testing:
    runs-on: ubuntu-latest
    environment: staging
    needs: [chaos-engineering, disaster-recovery, performance-testing]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r nerava-backend-v9/requirements.txt
          pip install pytest pytest-asyncio httpx bandit safety
      
      - name: Configure test environment
        run: |
          echo "TEST_ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///./test_nerava.db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
      
      - name: Start test services
        run: |
          # Start Redis for testing
          docker run -d --name test-redis -p 6379:6379 redis:alpine
          sleep 5
      
      - name: Run security tests
        run: |
          cd nerava-backend-v9
          python -m pytest app/tests/test_security.py -v
      
      - name: Run security scans
        run: |
          cd nerava-backend-v9
          # Bandit security linter
          bandit -r app/ -f json -o security-report.json
          
          # Safety check for known vulnerabilities
          safety check --json --output safety-report.json
      
      - name: Cleanup test services
        if: always()
        run: |
          docker stop test-redis || true
          docker rm test-redis || true
      
      - name: Generate security test report
        if: always()
        run: |
          echo "## Security Test Report" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Authentication: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Authorization: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Input validation: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Security scanning: ✅" >> $GITHUB_STEP_SUMMARY

  final-report:
    runs-on: ubuntu-latest
    needs: [chaos-engineering, disaster-recovery, performance-testing, security-testing]
    if: always()
    
    steps:
      - name: Generate final report
        run: |
          echo "## Game Day Testing - Final Report" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ needs.chaos-engineering.result }} / ${{ needs.disaster-recovery.result }} / ${{ needs.performance-testing.result }} / ${{ needs.security-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Chaos Engineering**: ${{ needs.chaos-engineering.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Disaster Recovery**: ${{ needs.disaster-recovery.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Testing**: ${{ needs.performance-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Testing**: ${{ needs.security-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review test results and address any failures" >> $GITHUB_STEP_SUMMARY
          echo "- Update DR procedures based on test findings" >> $GITHUB_STEP_SUMMARY
          echo "- Schedule follow-up tests for any critical issues" >> $GITHUB_STEP_SUMMARY
          echo "- Document lessons learned and process improvements" >> $GITHUB_STEP_SUMMARY
